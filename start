#!/bin/bash

# 🚀 Employee Directory - Universal One Command Start
# Works on Linux, Mac, and Windows (via Git Bash/WSL)

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'

log() { echo -e "${BLUE}[INFO]${NC} $1"; }
success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
error() { echo -e "${RED}[ERROR]${NC} $1"; }
warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }

# Get IP address
get_ip() {
    if command -v hostname >/dev/null 2>&1; then
        hostname -I | awk '{print $1}' 2>/dev/null || echo "localhost"
    else
        echo "localhost"
    fi
}

echo "==========================================="
echo "🚀 EMPLOYEE DIRECTORY - ONE COMMAND START"
echo "==========================================="
echo

# Quick check if already running
if curl -s http://localhost:8001/api/employees >/dev/null 2>&1 && curl -s http://localhost:3000 >/dev/null 2>&1; then
    IP=$(get_ip)
    success "Application is already running!"
    echo
    echo "🌐 Access URLs:"
    echo "   Frontend: http://$IP:3000"
    echo "   Backend:  http://$IP:8001/api/"
    echo
    echo "📊 All features are available:"
    echo "   ✅ Employee Directory with search"
    echo "   ✅ Image upload functionality"
    echo "   ✅ Attendance tracking"
    echo "   ✅ Hierarchy builder"
    echo
    exit 0
fi

# Check if we have Docker
if command -v docker >/dev/null 2>&1 && command -v docker-compose >/dev/null 2>&1; then
    echo "🐳 Docker available! Choose your method:"
    echo "1) Docker (Easiest - Zero setup required)"
    echo "2) Local development (Manual setup)"
    echo
    read -p "Select option (1 or 2, default 1): " choice
    choice=${choice:-1}
    
    if [ "$choice" = "1" ]; then
        log "Starting with Docker..."
        
        # Create data directory if needed
        mkdir -p data
        
        # Stop existing containers
        docker-compose down >/dev/null 2>&1 || true
        
        # Start services
        log "Building and starting services..."
        if docker-compose up --build -d; then
            log "Waiting for services to be ready..."
            sleep 15
            
            # Check if services are up
            if curl -s http://localhost >/dev/null 2>&1; then
                IP=$(get_ip)
                success "Application ready!"
                echo
                echo "🌐 Access URLs:"
                echo "   Main App: http://$IP (Single URL)"
                echo "   Frontend: http://$IP:3000"
                echo "   Backend:  http://$IP:8001/api/"
                echo
                echo "📊 All features available!"
                echo "🛑 To stop: docker-compose down"
                exit 0
            else
                error "Docker services failed to start properly"
                docker-compose logs --tail=20
            fi
        else
            error "Failed to start Docker containers"
        fi
    fi
fi

# Local development setup
log "Setting up local development..."

# Check prerequisites
if ! command -v node >/dev/null 2>&1; then
    error "Node.js not found. Install from https://nodejs.org/"
    exit 1
fi

if ! command -v python3 >/dev/null 2>&1 && ! command -v python >/dev/null 2>&1; then
    error "Python not found. Install from https://python.org/"
    exit 1
fi

success "Prerequisites found!"

# Create environment files
log "Setting up environment..."
cat > backend/.env << 'EOF'
MONGO_URL=mongodb://localhost:27017/employee_directory
DATA_SOURCE=excel
EXCEL_FILE_PATH=./data/EMPLOYEE_DIR.xlsx
HOST=0.0.0.0
PORT=8001
SECRET_KEY=employee-directory-secret-key
DEBUG=True
EOF

cat > frontend/.env << 'EOF'
REACT_APP_BACKEND_URL=http://localhost:8001
GENERATE_SOURCEMAP=false
EOF

# Install dependencies if needed
if [ ! -d "backend/venv" ]; then
    log "Setting up Python environment..."
    cd backend
    python3 -m venv venv 2>/dev/null || python -m venv venv
    source venv/bin/activate
    pip install -r requirements.txt
    cd ..
fi

if [ ! -d "frontend/node_modules" ]; then
    log "Installing frontend dependencies..."
    cd frontend
    if command -v yarn >/dev/null 2>&1; then
        yarn install
    else
        npm install
    fi
    cd ..
fi

# Start MongoDB if available
if command -v mongod >/dev/null 2>&1; then
    if ! pgrep mongod >/dev/null; then
        log "Starting MongoDB..."
        if command -v systemctl >/dev/null 2>&1; then
            sudo systemctl start mongod 2>/dev/null || true
        else
            mongod --fork --logpath /tmp/mongodb.log --dbpath ~/mongodb_data 2>/dev/null || true
        fi
    fi
fi

# Kill any existing processes on our ports
pkill -f "uvicorn server:app" 2>/dev/null || true
pkill -f ":8001" 2>/dev/null || true
pkill -f "yarn start" 2>/dev/null || true
pkill -f "npm start" 2>/dev/null || true
sleep 2

# Start services
log "Starting backend..."
cd backend
source venv/bin/activate
nohup python -m uvicorn server:app --host 0.0.0.0 --port 8001 --reload >../backend.log 2>&1 &
cd ..

log "Starting frontend..."
cd frontend
if command -v yarn >/dev/null 2>&1; then
    nohup yarn start >../frontend.log 2>&1 &
else
    nohup npm start >../frontend.log 2>&1 &
fi
cd ..

# Wait for services
log "Waiting for services to start..."
for i in {1..30}; do
    if curl -s http://localhost:8001/api/employees >/dev/null 2>&1; then
        break
    fi
    printf "."
    sleep 2
done

for i in {1..30}; do
    if curl -s http://localhost:3000 >/dev/null 2>&1; then
        break
    fi
    printf "."
    sleep 2
done

echo

# Check if both services are running
if curl -s http://localhost:8001/api/employees >/dev/null 2>&1 && curl -s http://localhost:3000 >/dev/null 2>&1; then
    IP=$(get_ip)
    success "Application is ready!"
    echo
    echo "==========================================="
    echo "✅ EMPLOYEE DIRECTORY RUNNING!"
    echo
    echo "🌐 Access URLs:"
    echo "   Frontend: http://$IP:3000"
    echo "   Backend:  http://$IP:8001/api/"
    echo
    echo "📊 Features Available:"
    echo "   ✅ Employee Directory (Google Sheets)"
    echo "   ✅ Advanced Search & Filtering"
    echo "   ✅ Image Upload & Management"
    echo "   ✅ Attendance Tracking"
    echo "   ✅ Hierarchy Builder with Org Chart"
    echo "   ✅ Mobile Responsive UI"
    echo
    echo "📄 Logs:"
    echo "   Backend: tail -f backend.log"
    echo "   Frontend: tail -f frontend.log"
    echo
    echo "🛑 To stop: pkill -f uvicorn && pkill -f 'yarn start'"
    echo "==========================================="
    echo
    log "Application running! Press Ctrl+C to view logs..."
    sleep 3
    tail -f backend.log frontend.log 2>/dev/null || sleep infinity
else
    error "Failed to start services. Check logs:"
    echo "Backend log:"
    tail -10 backend.log 2>/dev/null || echo "No backend log"
    echo "Frontend log:"
    tail -10 frontend.log 2>/dev/null || echo "No frontend log"
    exit 1
fi